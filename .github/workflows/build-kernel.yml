name: CI Build Kernel (ARM)

# Trigger this workflow on pushes and pull requests to the 'main' branch
on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    
    # Define environment variables for the build script
    env:
      # Use a specific kernel version tag for reproducible builds
      # Leaving this empty will build from the latest branch, which can be unstable
      KERNEL_TAG: "v6.1"
      # The defconfig for a generic ARMv7 kernel, suitable for QEMU testing
      DEFCONFIG: multi_v7_defconfig
      # The cross-compiler prefix
      CROSS_COMPILE: arm-linux-gnueabihf-

    steps:
      - name: Checkout Repository
        # Action to check out your code from the repo
        uses: actions/checkout@v4

      - name: Build Docker Image
        # The Dockerfile is located at the root of the repository, so we use "."
        run: docker build -t lab5-kernel:latest .

      - name: Run Kernel Build inside Container
        # The script builds the kernel inside the container,
        # mounting the repository root into /work
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/work \
            -w /work \
            lab5-kernel:latest \
            bash -c " \
              export KERNEL_TAG='${{ env.KERNEL_TAG }}'; \
              export DEFCONFIG='${{ env.DEFCONFIG }}'; \
              export CROSS_COMPILE='${{ env.CROSS_COMPILE }}'; \
              ./build_kernel.sh"

      - name: Upload Kernel Artifacts
        # Upload the built zImage and all generated DTB files
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: |
            linux/arch/arm/boot/zImage
            linux/arch/arm/boot/dts
          retention-days: 7

      # --- QEMU Test Job ---
      - name: Download Kernel Artifacts
        # Download the artifacts from the same job for testing
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: ./artifacts

      - name: Install QEMU
        # Install QEMU and necessary libraries for the test
        run: sudo apt-get update && sudo apt-get install -y qemu-system-arm

      - name: Run QEMU to boot kernel
        run: |
          # Use the zImage and a specific DTB for the versatilepb machine
          # The multi_v7_defconfig generates a lot of DTBs, but this is the right one for our test
          KIMG=./artifacts/linux/arch/arm/boot/zImage
          DTB=./artifacts/linux/arch/arm/boot/dts/vexpress-v2p-ca9.dtb
          
          echo "Starting QEMU test..."
          qemu-system-arm -M versatilepb -m 256M -nographic \
            -kernel "$KIMG" -dtb "$DTB" \
            -append "console=ttyAMA0 root=/dev/ram rdinit=/init" \
            -no-reboot -serial mon:stdio &
          
          # Wait for the kernel to boot
          sleep 30
          
          # Kill the QEMU process to end the job
          sudo pkill -f qemu-system-arm || true
